---
import "../styles/global.css";
import Breadcrumbs from "../components/Breadcrumbs.astro";
import BaseLayout from "./BaseLayout.astro";


export interface Props {
  frontmatter: {
    title: string;
    description?: string;
  };
}

const { frontmatter } = Astro.props;
---

<BaseLayout title={`${frontmatter.title}`}>
  <!-- <Header activeNav="about" /> -->
  <Breadcrumbs />
  <main id="main-content">
    <section id="about" class="prose prose-slate max-w-none prose-headings:scroll-my-20 prose-a:underline-offset-2 prose-a:decoration-blue-600 prose-img:rounded-lg dark:prose-invert">
      <h1 class="text-2xl tracking-wider sm:text-3xl">{frontmatter.title}</h1>
      <slot />
    </section>
  </main>
</BaseLayout>

<script>
    const codeBlocks = Array.from(document.querySelectorAll("div[data-rehype-pretty-code-fragment]"));
  
    for (let codeBlock of codeBlocks) {
      const codeBlockPre = codeBlock.getElementsByTagName("pre")[0];
  
      // Copy button
      const copyButton = document.createElement("button");
      copyButton.className =
        "p-1 px-2 rounded-md text-slate-300 text-xs bg-slate-800 hover:bg-slate-700";
      copyButton.innerHTML = "Copy";
  
      // Header title
      const titleSpan = document.createElement("span");
      titleSpan.className = "text-blue-400";
  
      // Header div
      const headerDiv = document.createElement("div");
      headerDiv.className =
        "flex w-full bg-slate-950 border-b-[0.5px] border-blue-400 rounded-t-lg mt-10 text-base items-center justify-between py-2 px-4";
  
      // Current title
      const titleDiv = codeBlock.querySelector("div[data-rehype-pretty-code-title]");
  
      // Set title to the language name if no current title is set
      if (titleDiv) {
        const title = titleDiv.innerHTML;
        titleSpan.innerHTML = title;
        codeBlock.removeChild(titleDiv);
      } else {
        titleSpan.innerHTML = codeBlockPre.getAttribute("data-language") as string;
      }
  
      headerDiv.appendChild(titleSpan);
      headerDiv.appendChild(copyButton);
      codeBlock.prepend(headerDiv);
  
      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }
  
    async function copyCode(block: Element, button: HTMLButtonElement) {
      const code = block.querySelector("code") as HTMLElement;
      const text = code.innerText as string;
      await navigator.clipboard.writeText(text);
      button.innerText = "Copied!";
  
      setTimeout(() => {
        button.innerText = "Copy";
      }, 750);
    }
  </script>